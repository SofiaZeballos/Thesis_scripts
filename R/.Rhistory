}
# Agregar columna de Dataset
df$Dataset <- name
# Convertir a formato largo para ggplot2
df_long <- pivot_longer(df, -c(Gene, Dataset), names_to = "Condition", values_to = "Expression")
return(df_long)
})
# ---- Otra versión sacando los outliers
# Función de normalización a nivel de todo el dataset
# Función de normalización a nivel de todo el dataset
normalize <- function(x) {
if (length(x) == 0 || max(x) == min(x)) {
return(rep(0, length(x)))  # Retorna 0 si no es posible normalizar
}
return((x - min(x)) / (max(x) - min(x)))
}
# Función para detectar y filtrar filas con outliers utilizando IQR
filter_outliers_iqr <- function(dataset) {
if (nrow(dataset) == 0) return(dataset)  # Si está vacío, regresar como está
data <- dataset[, -1]
rownames(data) <- dataset$Gene
detect_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
return(x < lower_bound | x > upper_bound)
}
outliers <- apply(data, 2, detect_outliers)
rows_with_outliers <- rowSums(outliers) > 0
return(dataset[!rows_with_outliers, ])
}
# Normalización, filtrado, eliminación de outliers y reestructuración
normalized_datasets <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Filtrar filas con outliers
df <- filter_outliers_iqr(df)
# Filtrar por los genes de interés
df <- df %>% filter(Gene %in% wbid_vector)
# Verificar si el dataset quedó vacío
if (nrow(df) == 0) {
warning(paste("El dataset", name, "está vacío después del filtrado."))
return(data.frame())  # Retorna un dataframe vacío
}
# Normalizar todo el dataset (excepto la primera columna Gene)
df_values <- as.matrix(df[, -1])
df_normalized <- normalize(as.vector(df_values))
df_normalized <- matrix(df_normalized, nrow = nrow(df), byrow = FALSE)
df_normalized <- as.data.frame(df_normalized)
colnames(df_normalized) <- colnames(df)[-1]
df <- cbind(Gene = df$Gene, df_normalized)
# Identificar y añadir filas para los genes faltantes
missing_genes <- setdiff(wbid_vector, df$Gene)
if (length(missing_genes) > 0) {
missing_rows <- data.frame(Gene = missing_genes, matrix(0, nrow = length(missing_genes), ncol = ncol(df) - 1))
colnames(missing_rows) <- colnames(df)
df <- bind_rows(df, missing_rows)
}
# Agregar columna de Dataset
df$Dataset <- name
# Convertir a formato largo para ggplot2
df_long <- pivot_longer(df, -c(Gene, Dataset), names_to = "Condition", values_to = "Expression")
return(df_long)
})
# Verificar qué genes de interés fueron eliminados como outliers
outliers_in_genes <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Filtrar filas con outliers
df_filtered <- filter_outliers_iqr(df)
# Verificar coincidencias con los genes de interés
genes_eliminados <- setdiff(wbid_vector, df_filtered$Gene)
return(data.frame(Dataset = name, GenesEliminados = genes_eliminados))
})
# Mostrar genes eliminados
outliers_in_genes
# Función para detectar y filtrar filas con outliers utilizando z-score
filter_outliers_zscore <- function(dataset, threshold = 3) {
if (nrow(dataset) == 0) return(dataset)  # Si está vacío, regresar como está
data <- dataset[, -1]  # Excluye la columna 'Gene'
rownames(data) <- dataset$Gene
# Calcular z-scores
z_scores <- scale(data)
# Identificar filas con algún valor fuera del umbral
rows_with_outliers <- rowSums(abs(z_scores) > threshold) > 0
# Retornar dataset sin filas con outliers
return(dataset[!rows_with_outliers, ])
}
# Aplicar el método de z-score en lugar de IQR
normalized_datasets <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Filtrar filas con outliers usando z-score
df <- filter_outliers_zscore(df)
# Filtrar por los genes de interés
df <- df %>% filter(Gene %in% wbid_vector)
# Verificar si el dataset quedó vacío
if (nrow(df) == 0) {
warning(paste("El dataset", name, "está vacío después del filtrado."))
return(data.frame())  # Retorna un dataframe vacío
}
# Normalizar todo el dataset (excepto la primera columna Gene)
df_values <- as.matrix(df[, -1])
df_normalized <- normalize(as.vector(df_values))
df_normalized <- matrix(df_normalized, nrow = nrow(df), byrow = FALSE)
df_normalized <- as.data.frame(df_normalized)
colnames(df_normalized) <- colnames(df)[-1]
df <- cbind(Gene = df$Gene, df_normalized)
# Identificar y añadir filas para los genes faltantes
missing_genes <- setdiff(wbid_vector, df$Gene)
if (length(missing_genes) > 0) {
missing_rows <- data.frame(Gene = missing_genes, matrix(0, nrow = length(missing_genes), ncol = ncol(df) - 1))
colnames(missing_rows) <- colnames(df)
df <- bind_rows(df, missing_rows)
}
# Agregar columna de Dataset
df$Dataset <- name
# Convertir a formato largo para ggplot2
df_long <- pivot_longer(df, -c(Gene, Dataset), names_to = "Condition", values_to = "Expression")
return(df_long)
})
# Verificar qué genes de interés fueron eliminados como outliers
outliers_in_genes <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Filtrar filas con outliers
df_filtered <- filter_outliers_iqr(df)
# Verificar coincidencias con los genes de interés
genes_eliminados <- setdiff(wbid_vector, df_filtered$Gene)
return(data.frame(Dataset = name, GenesEliminados = genes_eliminados))
})
# Mostrar genes eliminados
outliers_in_genes
# Combinar todos los datasets normalizados, filtrados y procesados en un solo dataframe largo
combined_data <- bind_rows(normalized_datasets)
# Crear el heatmap con facetas que muestran solo las columnas correspondientes a cada dataset
ggplot(combined_data, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión\nnormalizada") +
theme_minimal() +
labs(title = "Heatmap de Expresión", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
facet_wrap(~ Dataset, scales = "free_x", nrow = 1)  # Cambiado de ncol = 1 a nrow = 1
datasets <- list(ds1 = ds1, ds2 = ds2, ds3 = ds3, ds4 = ds4)
# Convertir los datasets al formato largo
raw_datasets_long <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Agregar columna de Dataset
df$Dataset <- name
# Convertir a formato largo para ggplot2
df_long <- pivot_longer(df, -c(Gene, Dataset), names_to = "Condition", values_to = "Expression")
return(df_long)
})
# Combinar todos los datasets en un solo dataframe largo
raw_combined_data <- bind_rows(raw_datasets_long)
# Crear el heatmap sin normalización ni filtrado
ggplot(raw_combined_data, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión sin normalizar ni filtrar", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
facet_wrap(~ Dataset, scales = "free_x", nrow = 1)  # Facetas por dataset
# Filtrar por genes de interés y convertir al formato largo
filtered_datasets <- lapply(names(datasets), function(name) {
df <- datasets[[name]]
# Filtrar por los genes de interés
df <- df %>% filter(Gene %in% wbid_vector)
# Agregar columna de Dataset
df$Dataset <- name
# Convertir a formato largo para ggplot2
df_long <- pivot_longer(df, -c(Gene, Dataset), names_to = "Condition", values_to = "Expression")
return(df_long)
})
# Combinar todos los datasets en un solo dataframe largo
filtered_combined_data <- bind_rows(filtered_datasets)
# Crear el heatmap sin normalización ni filtrado
ggplot(raw_combined_data, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión sin normalizar ni filtrar", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
facet_wrap(~ Dataset, scales = "free_x", nrow = 1)  # Facetas por dataset
# Crear el heatmap sin normalización ni filtrado
ggplot(filtered_combined_data, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión sin normalizar ni filtrar", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
facet_wrap(~ Dataset, scales = "free_x", nrow = 1)  # Facetas por dataset
# Crear el heatmap sin normalización ni filtrado
ggplot(filtered_combined_data, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión sin normalizar ni filtrar", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7)) +
facet_wrap(~ Dataset, scales = "free_x", nrow = 1)  # Facetas por dataset
View(filtered_combined_data)
# Filtrar el dataset 1 por los genes de interés
filtered_ds1 <- ds1 %>% filter(Gene %in% wbid_vector)
# Convertir a formato largo para ggplot2
filtered_ds1_long <- pivot_longer(filtered_ds1, -Gene, names_to = "Condition", values_to = "Expression")
# Crear el heatmap
ggplot(filtered_ds1_long, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión para Dataset 1", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7))
# Filtrar el dataset 1 por los genes de interés
filtered_ds1 <- ds1 %>% filter(Gene %in% wbid_vector)
filtered_ds2 <- ds2 %>% filter(Gene %in% wbid_vector)
filtered_ds3 <- ds3 %>% filter(Gene %in% wbid_vector)
filtered_ds4 <- ds4 %>% filter(Gene %in% wbid_vector)
# Convertir a formato largo para ggplot2
filtered_ds1_long <- pivot_longer(filtered_ds1, -Gene, names_to = "Condition", values_to = "Expression")
filtered_ds2_long <- pivot_longer(filtered_ds2, -Gene, names_to = "Condition", values_to = "Expression")
filtered_ds3_long <- pivot_longer(filtered_ds3, -Gene, names_to = "Condition", values_to = "Expression")
filtered_ds4_long <- pivot_longer(filtered_ds4, -Gene, names_to = "Condition", values_to = "Expression")
# Crear el heatmap
ggplot(filtered_ds2_long, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión para Dataset 1", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7))
# Crear el heatmap
ggplot(filtered_ds3_long, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión para Dataset 1", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7))
# Crear el heatmap
ggplot(filtered_ds4_long, aes(x = Condition, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión") +
theme_minimal() +
labs(title = "Heatmap de Expresión para Dataset 1", x = "Condiciones", y = "Genes") +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
axis.text.y = element_text(size = 6),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),
legend.title = element_text(size = 7))
library(edgeR)
#setwd('C:\\Users\\masoz\\Desktop\\TesisMaestria\\RNAseq\\Tablas_de_conteo\\fastqs\\Boeck_et_al\\')
expression_table <- read.csv("..\\Archivos\\Tablas_conteo\\expresion_bulk1.csv", header = TRUE, row.names = 2, sep=';')
#setwd('C:\\Users\\masoz\\Desktop\\TesisMaestria\\RNAseq\\Tablas_de_conteo\\fastqs\\Boeck_et_al\\')
expression_table <- read.csv("..\\Archivos\\Tablas_conteo\\expresion_Boeck.csv", header = TRUE, row.names = 2, sep=';')
tmm_Boeck = read.table("..\\Archivo\\Datasets_normalizados\\Boeck_et_al_experiment_gene-count_normalized_TMM.tab",
header = TRUE,
sep = '\t')
tmm_Boeck = read.table("..\\Archivo\\Datasets_normalizados\\Boeck_et_al_experiment_gene-count_normalized_TMM.tab",
header = TRUE,
sep = '\t')
tmm_Boeck = read.table("..\\Archivos\\Datasets_normalizados\\Boeck_et_al_experiment_gene-count_normalized_TMM.tab",
header = TRUE,
sep = '\t')
tpm_kalesky = read.table("..\\Archivos\\Datasets_normalizados\\kalesky_et_al_experiment_gene-count_normalized_TPM.tab",
header = TRUE,
sep = '\t')
#Leo los genes
genes = read.csv("..\\Archivos\\Genes_entrenamiento\\Genes_cadena.csv", sep = ';', stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(reshape2)
library(pheatmap)
library(gplots)
# Leer el archivo CSV con los genes
genes <- read.csv("..\\Archivos\\Genes_entrenamiento\\Genes_cadena.csv")
# Filtrar los genes a usar basados en la columna "Usar.para.entrenar"
wbid_vector <- genes$WBID[genes$Usar.para.entrenar == 'si']
# ------- Heatmap para el dataset de sc -------
set.seed(0)
data <- read.csv("..\\Archivos\\Grafo_co-expresion\\geneExpr_sinsacar0s.csv", sep = ',')
data <- read.csv("..\\Archivos\\Grafo_co-expresion\\geneExpr_sinsacar0s.csv", sep = ',')
# Asignar la primera columna como nombres de fila
rownames(data) <- data[, 1]
# Eliminar la primera columna del data frame
data <- data[, -1]
# Guardar los nombres de fila originales
rownames_originales <- rownames(data)
# Normalizar los datos
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data, normalize))
rownames(data_normalized) <- rownames_originales
# Seleccionar las columnas que coincidan con wbid_vector
selected_data <- data_normalized[, colnames(data_normalized) %in% wbid_vector]
# Crear un vector de correspondencia entre WBID y Gen.en.Celegans
wbid_to_gene <- setNames(genes$Gen.en.Celegans, genes$WBID)
# Renombrar las columnas de selected_data usando la correspondencia
colnames(selected_data) <- wbid_to_gene[colnames(selected_data)]
# Agregar una columna de identificación de células
selected_data$Cell <- rownames(selected_data)
# Convertir el data frame a formato largo para ggplot
selected_data_long <- melt(selected_data, id.vars = "Cell", variable.name = "Gene", value.name = "Expression")
# Crear un vector de correspondencia entre los genes seleccionados y sus complejos
gene_complex_mapping <- setNames(genes$Complejo, genes$Gen.en.Celegans)
# Asignar el complejo correspondiente a cada gen en el formato largo
selected_data_long$Complejo <- gene_complex_mapping[as.character(selected_data_long$Gene)]
# Ordenar los datos por Complejo
selected_data_long <- selected_data_long[order(selected_data_long$Complejo),]
# Crear el heatmap ordenado por Complejo
ggplot(selected_data_long, aes(x = Cell, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión\nnormalizada") +
theme_minimal() +
labs(title = "", x = "Células", y = "Genes") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),     # Tamaño del texto de la leyenda
legend.title = element_text(size = 7),    # Tamaño del título de la leyenda
axis.text.y = element_text(size = 7),     # Tamaño del texto del eje y
axis.title.x = element_text(size = 8),    # Tamaño del título del eje x
axis.title.y = element_text(size = 8)) +  # Tamaño del título del eje y
facet_grid(Complejo ~ ., scales = "free_y", space = "free_y")
# ------- Heatmap para el dataset de sc -------
set.seed(0)
data <- read.csv("C:\\Users\\masoz\\Desktop\\TesisMaestria\\Grafo\\geneExpr_sinsacar0s.csv", sep = ',')
# Asignar la primera columna como nombres de fila
rownames(data) <- data[, 1]
# Eliminar la primera columna del data frame
data <- data[, -1]
# Guardar los nombres de fila originales
rownames_originales <- rownames(data)
# Normalizar los datos
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data, normalize))
rownames(data_normalized) <- rownames_originales
# Seleccionar las columnas que coincidan con wbid_vector
selected_data <- data_normalized[, colnames(data_normalized) %in% wbid_vector]
# Crear un vector de correspondencia entre WBID y Gen.en.Celegans
wbid_to_gene <- setNames(genes$Gen.en.Celegans, genes$WBID)
# Renombrar las columnas de selected_data usando la correspondencia
colnames(selected_data) <- wbid_to_gene[colnames(selected_data)]
# Seleccionar aleatoriamente 10 genes (columnas)
random_genes <- sample(colnames(data_normalized), 10)
# Extraer los datos de estos genes seleccionados
random_data <- data_normalized[, random_genes]
# Convertir el data frame de genes aleatorios al formato largo
random_data_long <- melt(as.data.frame(random_data), variable.name = "Gene", value.name = "Expression")
# Asignar un nombre genérico para las células
random_data_long$Cell <- rownames(data_normalized)
# Asignar un Complejo genérico "Random" a estos genes
random_data_long$Complejo <- "R"
# Convertir el data frame original a formato largo
selected_data$Cell <- rownames(selected_data)
selected_data_long <- melt(selected_data, id.vars = "Cell", variable.name = "Gene", value.name = "Expression")
# Crear un vector de correspondencia entre los genes seleccionados y sus complejos
gene_complex_mapping <- setNames(genes$Complejo, genes$Gen.en.Celegans)
# Asignar el complejo correspondiente a cada gen en el formato largo
selected_data_long$Complejo <- gene_complex_mapping[as.character(selected_data_long$Gene)]
# Combinar los datos originales con los datos aleatorios
combined_data_long <- rbind(selected_data_long, random_data_long)
# Ordenar los datos para que "R" aparezca al final
combined_data_long$Complejo <- factor(combined_data_long$Complejo,
levels = c(sort(unique(selected_data_long$Complejo)), "R"))
# Crear el heatmap con el nuevo bloque de genes aleatorios
ggplot(combined_data_long, aes(x = Cell, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_viridis_c(option = "magma", name = "Expresión\nnormalizada")+
theme_minimal() +
labs(title = "", x = "Células", y = "Genes") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),     # Tamaño del texto de la leyenda
legend.title = element_text(size = 7),    # Tamaño del título de la leyenda
axis.text.y = element_text(size = 7),     # Tamaño del texto del eje y
axis.title.x = element_text(size = 8),    # Tamaño del título del eje x
axis.title.y = element_text(size = 8)) +  # Tamaño del título del eje y
facet_grid(Complejo ~ ., scales = "free_y", space = "free_y")
# ------- Heatmap para el dataset de sc -------
set.seed(0)
data <- read.csv("..\\Archivos\\Grafo_co-expresion\\geneExpr_sinsacar0s.csv", sep = ',')
# Asignar la primera columna como nombres de fila
rownames(data) <- data[, 1]
# Eliminar la primera columna del data frame
data <- data[, -1]
# Guardar los nombres de fila originales
rownames_originales <- rownames(data)
# Normalizar los datos
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data, normalize))
rownames(data_normalized) <- rownames_originales
# Seleccionar las columnas que coincidan con wbid_vector
selected_data <- data_normalized[, colnames(data_normalized) %in% wbid_vector]
# Crear un vector de correspondencia entre WBID y Gen.en.Celegans
wbid_to_gene <- setNames(genes$Gen.en.Celegans, genes$WBID)
# Renombrar las columnas de selected_data usando la correspondencia
colnames(selected_data) <- wbid_to_gene[colnames(selected_data)]
# Agregar una columna de identificación de células
selected_data$Cell <- rownames(selected_data)
# Convertir el data frame a formato largo para ggplot
selected_data_long <- melt(selected_data, id.vars = "Cell", variable.name = "Gene", value.name = "Expression")
# Crear un vector de correspondencia entre los genes seleccionados y sus complejos
gene_complex_mapping <- setNames(genes$Complejo, genes$Gen.en.Celegans)
# Asignar el complejo correspondiente a cada gen en el formato largo
selected_data_long$Complejo <- gene_complex_mapping[as.character(selected_data_long$Gene)]
# Ordenar los datos por Complejo
selected_data_long <- selected_data_long[order(selected_data_long$Complejo),]
# Crear el heatmap ordenado por Complejo
ggplot(selected_data_long, aes(x = Cell, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "purple", name = "Expresión\nnormalizada") +
theme_minimal() +
labs(title = "", x = "Células", y = "Genes") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),     # Tamaño del texto de la leyenda
legend.title = element_text(size = 7),    # Tamaño del título de la leyenda
axis.text.y = element_text(size = 7),     # Tamaño del texto del eje y
axis.title.x = element_text(size = 8),    # Tamaño del título del eje x
axis.title.y = element_text(size = 8)) +  # Tamaño del título del eje y
facet_grid(Complejo ~ ., scales = "free_y", space = "free_y")
data <- read.csv("C:\\Users\\masoz\\Desktop\\TesisMaestria\\Grafo\\geneExpr_sinsacar0s.csv", sep = ',')
# Asignar la primera columna como nombres de fila
rownames(data) <- data[, 1]
# Eliminar la primera columna del data frame
data <- data[, -1]
# Guardar los nombres de fila originales
rownames_originales <- rownames(data)
# Normalizar los datos
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_normalized <- as.data.frame(lapply(data, normalize))
rownames(data_normalized) <- rownames_originales
# Seleccionar las columnas que coincidan con wbid_vector
selected_data <- data_normalized[, colnames(data_normalized) %in% wbid_vector]
# Crear un vector de correspondencia entre WBID y Gen.en.Celegans
wbid_to_gene <- setNames(genes$Gen.en.Celegans, genes$WBID)
# Renombrar las columnas de selected_data usando la correspondencia
colnames(selected_data) <- wbid_to_gene[colnames(selected_data)]
# Seleccionar aleatoriamente 10 genes (columnas)
random_genes <- sample(colnames(data_normalized), 10)
# Extraer los datos de estos genes seleccionados
random_data <- data_normalized[, random_genes]
# Convertir el data frame de genes aleatorios al formato largo
random_data_long <- melt(as.data.frame(random_data), variable.name = "Gene", value.name = "Expression")
# Asignar un nombre genérico para las células
random_data_long$Cell <- rownames(data_normalized)
# Asignar un Complejo genérico "Random" a estos genes
random_data_long$Complejo <- "R"
# Convertir el data frame original a formato largo
selected_data$Cell <- rownames(selected_data)
selected_data_long <- melt(selected_data, id.vars = "Cell", variable.name = "Gene", value.name = "Expression")
# Crear un vector de correspondencia entre los genes seleccionados y sus complejos
gene_complex_mapping <- setNames(genes$Complejo, genes$Gen.en.Celegans)
# Asignar el complejo correspondiente a cada gen en el formato largo
selected_data_long$Complejo <- gene_complex_mapping[as.character(selected_data_long$Gene)]
# Combinar los datos originales con los datos aleatorios
combined_data_long <- rbind(selected_data_long, random_data_long)
# Ordenar los datos para que "R" aparezca al final
combined_data_long$Complejo <- factor(combined_data_long$Complejo,
levels = c(sort(unique(selected_data_long$Complejo)), "R"))
# Crear el heatmap con el nuevo bloque de genes aleatorios
ggplot(combined_data_long, aes(x = Cell, y = Gene, fill = Expression)) +
geom_tile() +
scale_fill_viridis_c(option = "magma", name = "Expresión\nnormalizada")+
theme_minimal() +
labs(title = "", x = "Células", y = "Genes") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 6),     # Tamaño del texto de la leyenda
legend.title = element_text(size = 7),    # Tamaño del título de la leyenda
axis.text.y = element_text(size = 7),     # Tamaño del texto del eje y
axis.title.x = element_text(size = 8),    # Tamaño del título del eje x
axis.title.y = element_text(size = 8)) +  # Tamaño del título del eje y
facet_grid(Complejo ~ ., scales = "free_y", space = "free_y")
